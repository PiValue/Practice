/* Date - 02/07/2017 - 9AM to 10AM */

// Other question - Hashmap performance for lookup, worstcase. How would you improve chaining so worstcase isn't always O(N) one heavy collision cases. Said could have BST like structure from bucket incase of collision.
// General discussion on my profile and Qualitrics work.


//Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

//For example: Given the below binary tree and sum = 22,
//
//             5
//            / \
//           4   8
//          /   / \
//         11  13  4
//        /  \    / \
//       7    2  5   1

//return
//  [[5, 4, 11, 2],
//  [ 5, 8, 4, 5]]
  
//Class node
//{
//    node left;
//    node right;
//    int value;
//}

//>> path: [5, 8]
//>> sum: 17
//>> result: [[5, 4, 11, 2], ]

public List<List<Integer>> pathSums(Node root, int sum, List<Integer> path) {
    if (root == null) {
        return new ArrayList<List<Integer>>();
    }

    if (root.left == null && root.right == null) {
       List<List<Integer>> result = new ArrayList<>();
        if (sum - root.value == 0) {
            path.add(root.value);
            result.add(new ArrayList<Integer>(path));
            path.remove(path.size()-1);
        }             
        return result;

    }

    path.add(root.value);
    List<List<Integer>> result = new ArrayList<>();
    result.addAll(pathSums(root.left, sum - head.value, path));
    result.addAll(pathSums(root.right, sum - head.value, path));
    path.remove(path.size()-1);
    return result;
}

--- Runnable code ---

import java.util.ArrayList;
import java.util.List;

import lombok.AllArgsConstructor;

public class PathSums {
    private List<List<Integer>> pathSums (Node root, int sum, List<Integer> path) {
        List<List<Integer>> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        if (root.left == null && root.right == null) {
            // this is a leaf node
            if ((sum - root.value) == 0) {
                path.add(root.value);
                result.add(new ArrayList<>(path));
                path.remove(path.size() - 1);
            }
            return result;
        }
        
        path.add(root.value);
        result.addAll(pathSums(root.left, sum - root.value, path));
        result.addAll(pathSums(root.right, sum - root.value, path));
        path.remove(path.size() - 1);
        return result;
    }

    @AllArgsConstructor
    private static class Node {
        private int value;
        private Node left, right;
    }
    
    
    public static void main(String[] args) {
        Node root = new Node(5, new Node(4, new Node(11, new Node(7, null, null), new Node(2, null, null)), null), new Node(8, new Node(13, null, null), new Node(4, new Node(5, null, null), new Node(1, null, null))));
        System.out.println(new PathSums().pathSums(root, 22, new ArrayList<>()));
    }
}

Update: Cleared for onsite at Seattle office. 4-5 rounds.



